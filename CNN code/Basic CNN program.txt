###Imports
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.utils import to_categorical

##Load MNIST dataset

# Numbers
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Fashion
#fashion_mnist = tf.keras.datasets.fashion_mnist
#(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Reshape
train_images = train_images.reshape((60000, 28, 28))
test_images = test_images.reshape((10000, 28, 28))
train_images = train_images.astype('float32') / 255
test_images = test_images.astype('float32') / 255
#train_labels = to_categorical(train_labels)
#test_labels = to_categorical(test_labels)

# Can change - amount of data
# Get the first 2000 data points for train images and 50 data points for test images

# Training Set
train_images = train_images[:5000]
test_images = test_images[:1000]

# Testing Set
train_labels = train_labels[:5000]
test_labels = test_labels[:1000]

print(f"Train Images Size: {len(train_images)} and Test Images Size: {len(test_images)}")
'''
# Display the first 10 images with labels
plt.figure(figsize=(10, 4))
for i in range(6):
    plt.subplot(2, 3, i + 1)
    plt.imshow(train_images[i], cmap='gray')
    plt.title(f"Label: {train_labels[i]}", fontsize=8)
    plt.axis('off')

plt.show()
'''

############################################################ MAIN ML CODE ############################################################
# Define the model as a function
model = tf.keras.Sequential([
  ## Don't change this
  #tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
  tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)), 
  tf.keras.layers.MaxPooling2D((2, 2)),  # Add MaxPooling2D layer here
  tf.keras.layers.Flatten(),
  tf.keras.layers.BatchNormalization(),

  # CHANGE HERE (number of neurons, number of layers, non linear activation function)
  tf.keras.layers.Dense(12, activation='leaky_relu'),
  #tf.keras.layers.Dense(20, activation='relu'),
  tf.keras.layers.BatchNormalization(),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(12, activation='softmax'),
  #tf.keras.layers.Dropout(0.3),

  # Don't change this
  tf.keras.layers.Dense(10)
]) 

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
#optimizer is for backpropagation, loss is how we figure out how far off we are from the proper labels

#Train the model
history = model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))

############################################################ END ML CODE ############################################################


# Plot training and validation loss and accuracy
def plot_training_history(history):
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.legend()
    plt.xlabel('Epochs')
    plt.ylabel('Loss')

    plt.subplot(1, 2, 2)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.legend()
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')

    plt.show()

plot_training_history(history)
'''
# Comment out based on what data set you want to use
#class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
class_names = ['0', '1', '2', '3', '4','5', '6', '7', '8', '9']

probability_model = tf.keras.Sequential([model,
                                         tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images)

def plot_image(i, predictions_array, true_label, img):
  true_label, img = true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  true_label = true_label[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()
'''